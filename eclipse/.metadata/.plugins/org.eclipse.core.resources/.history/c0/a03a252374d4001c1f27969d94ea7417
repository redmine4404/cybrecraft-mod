package fr.redmine.redmod.event;

import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import cpw.mods.fml.client.FMLClientHandler;
import cpw.mods.fml.common.eventhandler.Event;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.gameevent.TickEvent;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import fr.redmine.redmod.redmod;
import fr.redmine.redmod.gui.GuiCustomMainMenu;
import fr.redmine.redmod.init.RegisterBlock;
import fr.redmine.redmod.init.RegisterItems;
import fr.redmine.redmod.thread.TickThread;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.entity.Entity;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

public class EventVannila {

	 private static final Logger logger = LogManager.getLogger();
	 
	
	static World world = null;
	 
	public static World getWorld() {
		return world;
		
	}
	 
		@SubscribeEvent
	   public void onTick(TickEvent.WorldTickEvent event){
		world = event.world;
		 TickThread tickthread = new TickThread();
		tickthread.start();
/**		 List entityList = event.world.loadedEntityList;
		 int listSize = entityList.size();
		 
	//	 System.out.println("entitylist size" + entityList.size());
		 
		 if(entityList.size() != 0){
			 for(int i = 0;i != listSize; i++){
				 if(entityList.get(i) != null && entityList.get(i) instanceof EntityItem){
					 EntityItem item = (EntityItem) entityList.get(i);
					 List AABB = item.worldObj.getEntitiesWithinAABBExcludingEntity(item, item.boundingBox);
				//	 System.out.println("aabb size" + AABB.size());
					 for(int l = 0; l != AABB.size(); l++){
						 if(AABB.get(l) instanceof EntityItem){
						 EntityItem item2 = (EntityItem) AABB.get(l);
						 EntityItem item1 = item;
						 World world = item1.worldObj;
						 
						 System.out.println("item1 pos x postion : " +  (int)item1.posX + ", pos y postion : " +  (int)item1.posY + ", pos y position : " +  (int)item1.posZ );
						 System.out.println("item2 pos x postion : " + (int)item2.posX + ", pos y postion : " +  (int)item2.posY + ", pos y position : " +  (int)item2.posZ );

						 
						// System.out.println("item 1 " + item1 + "item 2" + item2);
						 // System.out.println(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) + " " + item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade) + " " + world.getBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ).equals(RegisterBlock.SmelterBlock));
					//	 System.out.println(world.getBlock((int)item1.posX - 1, (int)item1.posY - 1, (int)item1.posZ - 1));
						// System.out.println((int)item1.posX + " " + (int)(item1.posY - 1) + " " + (int)item1.posZ);
							 	if(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) && item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade)&& world.getBlock((int)item1.posX , (int)item1.posY - 1, (int)item1.posZ).equals(RegisterBlock.SmelterBlock)){
							 		item2.setDead();
							 		world.setBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ, RegisterBlock.SmelterBlockEmpty);
							 		item1.dropItem(RegisterItems.redminite_hammer, 1);
							 		item1.setDead();
							 }
					 	}
				 	}
			 	}	
		 	} 
	 	}**/
	 }
		@SubscribeEvent
		public void onTickArmor(TickEvent.PlayerTickEvent e){
		System.out.println("truc");
			List playerlist = world.playerEntities;
			for(int i1 = 0; i1 <= playerlist.size() - 1; i1++) {
		 		EntityPlayer player = e.player;
		 		double helmetLowest = 0;
		 		double chestplateLowest = 0;
		 		double leggingsLowest = 0;
		 		double bootLowest = 0;
		 		
		 		double total = 0;
		// 		System.out.println("truc");
		 		
		 		ItemStack[] inv = player.inventory.armorInventory;
		 		
		 		if(inv[0] != null && inv[0].getItem() == RegisterItems.CompressedIronBoots) {
		 			bootLowest = 0.00001;
		 		} else {
		 			bootLowest = 0;
		 		}
		 		
		 		if(inv[1] != null && inv[1].getItem() == RegisterItems.CompressedIronLeggings) {	
		 			leggingsLowest = 0.00001;
		 		} else {
		 			leggingsLowest = 0;
		 		}	
		 			
		 		if(inv[2] != null && inv[2].getItem() == RegisterItems.CompressedIronChestPlate) {
		 			chestplateLowest = 0.00001;
		 		} else {
		 			chestplateLowest = 0;
		 		}
		 		
		 		if(inv[3] != null && inv[3].getItem() == RegisterItems.CompressedIronHelmet) {	
		 			helmetLowest = 0.00001;
		 		} else {
		 			helmetLowest = 0;
		 		}
		 		

		 		total = helmetLowest + chestplateLowest + leggingsLowest + bootLowest;
		 		System.out.println(total);
		 	//	final AttributeModifier SPEED_BONUS = new AttributeModifier("speed armor" ,bootLowest + leggingsLowest + chestplateLowest + helmetLowest);
		 		
		 		

				AttributeModifier moras = new AttributeModifier("Speed Boost", 0.00001, 0);
				player.getEntityAttribute(SharedMonsterAttributes.movementSpeed).removeAllModifiers();;
				player.getEntityAttribute(SharedMonsterAttributes.movementSpeed).applyModifier(moras);
			}
		}
  }