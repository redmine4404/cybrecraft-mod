package fr.redmine.redmod.thread;

import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.UUID;

import fr.redmine.redmod.redmod;
import fr.redmine.redmod.event.EventVannila;
import fr.redmine.redmod.init.RegisterBlock;
import fr.redmine.redmod.init.RegisterItems;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.ai.attributes.IAttributeInstance;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;

public class TickThread extends Thread{
	
	@Override
	public void run() throws ConcurrentModificationException {
	// System.out.println("world est null ? " + (EventVannila.getWorld()== null));
	//	System.out.println("loaded entity list est null ? " + EventVannila.getWorld().getLoadedEntityList() != null);
	//	System.out.println("world est égal a zero ? " + (EventVannila.getWorld().getLoadedEntityList().size() != 0));
	
		if(EventVannila.getWorld()!= null) {
		World world = EventVannila.getWorld(); 
	//	System.out.println(worldserver);
	//	System.out.println("truc" + worldserver.getLoadedEntityList());
		 List entityList = world.loadedEntityList;
		 
	//	System.out.println("truc");
		 
		 if(entityList.size() != 0){
			 for(int i = 0; i < entityList.size(); i++){
			//	 System.out.print("truc"); 
	//		try{
			//	System.out.print("chose");
				if(entityList.get(i) != null && entityList.get(i) instanceof EntityItem){
					 EntityItem item = (EntityItem) entityList.get(i);
					 List AABB = item.worldObj.getEntitiesWithinAABBExcludingEntity(item, item.boundingBox);
				//	 System.out.println("aabb size" + AABB.size());
					 for(int l = 0; l != AABB.size(); l++){
						 if(AABB.get(l) instanceof EntityItem){
						 EntityItem item2 = (EntityItem) AABB.get(l);
						 EntityItem item1 = item;
					//	 World world1 = item1.worldObj;
						 
						 System.out.println("item1 pos x postion : " +  ((int)item1.serverPosX + 0.5) + ", pos y postion : " +  (int)item1.serverPosY + ", pos y position : " +  (int)item1.serverPosZ);
						 System.out.println("item2 pos x postion : " + (int)item2.posX + ", pos y postion : " +  (int)item2.posY + ", pos y position : " +  (int)item2.posZ);

						 
						// System.out.println("item 1 " + item1 + "item 2" + item2);
						 // System.out.println(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) + " " + item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade) + " " + world.getBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ).equals(RegisterBlock.SmelterBlock));
					//	 System.out.println(world.getBlock((int)item1.posX - 1, (int)item1.posY - 1, (int)item1.posZ - 1));
						 // System.out.println((int)item1.posX + " " + (int)(item1.posY - 1) + " " + (int)item1.posZ);
						 if(world.getBlock(item1.serverPosX,	(int)item1.serverPosY - 1, (int) item1.serverPosZ) == RegisterBlock.SmelterBlock) {
							 	if(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) && item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade)){
							 		// world1.setBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ, RegisterBlock.SmelterBlockEmpty);
									item2.setDead();
							 		item1.dropItem(RegisterItems.redminite_hammer, 1);	
							 		item1.setDead();
							 		world.setBlock((int)(item1.posX - 0.5), (int)item1.posY - 1, (int)(item1.posZ - 0.5), RegisterBlock.SmelterBlockEmpty);

							 		}
							 	
							 	
							 	if(item1.getEntityItem().getItem().equals(Items.diamond_helmet) && item2.getEntityItem().getItem().equals(RegisterItems.CompressedIronIngot)) {
							 		item1.dropItem(RegisterItems.CompressedIronHelmet, 1);	
							 		item1.setDead();
							 		item2.setDead();
							 		world.setBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ, RegisterBlock.SmelterBlockEmpty);

						 			}
//						 		item1.setDead();
	//					 		item2.setDead();
						 		}
							 }
					 	 }
					}
					 /**	
				List playerlist = world.playerEntities;
					for(int i1 = 0; i1 <= playerlist.size() - 1; i1++) {
				 		EntityPlayer player = (EntityPlayer) playerlist.get(i1);
				 		double helmetLowest = 0;
				 		double chestplateLowest = 0;
				 		double leggingsLowest = 0;
				 		double bootLowest = 0;
				 		
				// 		System.out.println("truc");
				 		
				 		ItemStack[] inv = player.inventory.armorInventory;
				 		
				 		if(inv[0] != null && inv[0].getItem() == RegisterItems.CompressedIronBoots) {
				 			bootLowest = 1;
				 		} else {
				 			bootLowest = 0;
				 		}
				 		
				 		if(inv[1] != null && inv[1].getItem() == RegisterItems.CompressedIronLeggings) {	
				 			leggingsLowest = 1;
				 		} else {
				 			leggingsLowest = 0;
				 		}	
				 			
				 		if(inv[2] != null && inv[2].getItem() == RegisterItems.CompressedIronChestPlate) {
				 			chestplateLowest = 1;
				 		} else {
				 			chestplateLowest = 0;
				 		}
				 		
				 		if(inv[3] != null && inv[3].getItem() == RegisterItems.CompressedIronHelmet) {	
				 			helmetLowest = 1;
				 		} else {
				 			helmetLowest = 0;
				 		}
				 		

				 		
				 	//	final AttributeModifier SPEED_BONUS = new AttributeModifier("speed armor" ,bootLowest + leggingsLowest + chestplateLowest + helmetLowest);
				 		
				 		

						AttributeModifier moras = new AttributeModifier("Speed Boost", 0, 0);
						player.getEntityAttribute(SharedMonsterAttributes.movementSpeed).applyModifier(moras);
					
				 		}**/	
	//		}catch(Exception e){
		//		System.out.println(e.getMessage());
			// }		 
		}
	}	
		 	
	 	}
	}
}
