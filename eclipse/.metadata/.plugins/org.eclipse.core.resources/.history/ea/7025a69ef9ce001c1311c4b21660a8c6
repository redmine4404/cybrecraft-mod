package fr.redmine.redmod.thread;

import java.util.ConcurrentModificationException;
import java.util.List;

import fr.redmine.redmod.redmod;
import fr.redmine.redmod.event.EventVannila;
import fr.redmine.redmod.init.RegisterBlock;
import fr.redmine.redmod.init.RegisterItems;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;

public class TickThread extends Thread{
	
	@Override
	public void run() throws ConcurrentModificationException {
		try {
			sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	while(true) {
//		System.out.println("world est null ? " + (EventVannila.getWorld()== null));
	//	System.out.println("loaded entity list est null ? " + EventVannila.getWorld().getLoadedEntityList() != null);
	//	System.out.println("world est égal a zero ? " + (EventVannila.getWorld().getLoadedEntityList().size() != 0));
	
		if(EventVannila.getWorld()!= null) {
		World worldserver = EventVannila.getWorld(); 
	//	System.out.println(worldserver);
	//	System.out.println("truc" + worldserver.getLoadedEntityList());
		 List entityList = worldserver.loadedEntityList;
		 int listSize = entityList.size();
		 
		// System.out.println("truc");
		 
		 if(entityList.size() != 0){
			 for(int i = 0;i != listSize - 1; i++){
				 if(entityList.get(i) != null && entityList.get(i) instanceof EntityItem){
					 EntityItem item = (EntityItem) entityList.get(i);
					 List AABB = item.worldObj.getEntitiesWithinAABBExcludingEntity(item, item.boundingBox);
				//	 System.out.println("aabb size" + AABB.size());
					 for(int l = 0; l != AABB.size(); l++){
						 if(AABB.get(l) instanceof EntityItem){
						 EntityItem item2 = (EntityItem) AABB.get(l);
						 EntityItem item1 = item;
						 World world = item1.worldObj;
						 
						 System.out.println("item1 pos x postion : " +  (int)item1.posX + ", pos y postion : " +  (int)item1.posY + ", pos y position : " +  (int)item1.posZ );
						 System.out.println("item2 pos x postion : " + (int)item2.posX + ", pos y postion : " +  (int)item2.posY + ", pos y position : " +  (int)item2.posZ );

						 
						// System.out.println("item 1 " + item1 + "item 2" + item2);
						 // System.out.println(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) + " " + item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade) + " " + world.getBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ).equals(RegisterBlock.SmelterBlock));
					//	 System.out.println(world.getBlock((int)item1.posX - 1, (int)item1.posY - 1, (int)item1.posZ - 1));
						// System.out.println((int)item1.posX + " " + (int)(item1.posY - 1) + " " + (int)item1.posZ);
							 	if(item1.getEntityItem().getItem().equals(RegisterItems.redminite_pickaxe) && item2.getEntityItem().getItem().equals(RegisterItems.hammer_upgrade)&& world.getBlock((int)item1.posX , (int)item1.posY - 1, (int)item1.posZ).equals(RegisterBlock.SmelterBlock)){
							 		item2.setDead();
							 		world.setBlock((int)item1.posX, (int)item1.posY - 1, (int)item1.posZ, RegisterBlock.SmelterBlockEmpty);
							 		item1.dropItem(RegisterItems.redminite_hammer, 1);
							 		item1.setDead();
							 		}
							 	}
							 }
					 	}
				 	}
			 	}	
		 	} 
	 	}
	}
	

}
